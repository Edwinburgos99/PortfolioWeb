---
import BaseLayout from '../layouts/BaseLayout.astro';
import Project from "../components/Project.astro";

const PROJECTS: Project[] = [
	{
		title: "Bot_Peliculas_IMDB",
		urLImg: "/Bot_Peliculas_Telegram.png",
		description: "Bot de Telegram desarrollado utilizando la API de OMDB (Open Movie Database), que permite obtener información detallada sobre películas.",
		link: "https://github.com/Edwinburgos99/Bot_Peliculas_IMDB",
		usedSkills: [
			{
				name: "Python",
				iconurl: "/Python.svg"
			},
		],
		categories: ["Personal", "Backend", "Bots"],
	},
	{
		title: "Concierto",
		urLImg: "/Ubicacion_Optima_Concierto.png",
		description: "Ubicación optima de un concierto, basado en coordenadas de ciudades que siempre deben tener 2 posiciones enteras.",
		link: "https://github.com/Edwinburgos99/Concierto",
		usedSkills: [
			{
				name: "Python",
				iconurl: "/Python.svg"
			},
		],
		categories: ["Académico","Personal", "Algoritmos", "Backend"],
	},
	{
		title: "Angeles_del_Rio",
		urLImg: "/Dashboard.png",
		description: "El Proyecto consiste en el procesamiento y análisis de datos crudos, implementando dashboards dinámicos en Excel y Power BI para la visualización interactiva de la información.",
		link: "https://github.com/Edwinburgos99/Angeles_del_Rio",
		usedSkills: [
			{
				name: "PowerBI",
				iconurl: "/Power_BI.svg"
			},
			{
				name: "Excel",
				iconurl: "/Excel.png"
			},
		],
		categories: ["Empresa", "Análisis de datos"],
	},
	{
		title: "Opencv",
		urLImg: "/Reconocimiento_autos.png",
		description: "Repositorio de proyectos hechos con la librería OpenCV, que implementan algoritmos para el reconocimiento de rostros, detección de ojos y detección de automóviles.",
		link: "https://github.com/Edwinburgos99/Opencv",
		usedSkills: [
			{
				name: "Python",
				iconurl: "/Python.svg"
			},
		],
		categories: ["Personal", "Visión por computadora"],
	},
	{
		title: "Bot_Musica_Youtube",
		urLImg: "/Bot_Peliculas_Telegram.png",
		description: "Bot de telegram creado en base a la API de YouTube data para la búsqueda de canciones en base a un título o autor.",
		link: "https://github.com/Edwinburgos99/Bot_Musica_Youtube",
		usedSkills: [
			{
				name: "Python",
				iconurl: "/Python.svg"
			},
		],
		categories: ["Personal", "Backend", "Bots"],
	},
	{
		title: "Analisys_Data",
		urLImg: "/Bot_Peliculas_Telegram.png",
		description: "Transformación de datos crudos de Kaggle por medio del lenguaje Python e informes dinámicos usando softwares de negocios (Power BI, Excel).",
		link: "https://github.com/Edwinburgos99/Analisys_Data",
		usedSkills: [
			{
				name: "Python",
				iconurl: "/Python.svg"
			},
			{
				name: "PowerBI",
				iconurl: "/Power_BI.svg"
			},
			{
				name: "Excel",
				iconurl: "/Excel.png"
			},
		],
		categories: ["Personal", "Análisis de datos"],
	},
];

const ALL_CATEGORIES: string[] = ["Todos", ...new Set(PROJECTS.flatMap(p => (p.categories)))];
---


<dialog id="imgModal" class="backdrop:bg-black/70 p-0 rounded-sm relative">
  <img id="modal-img" src="" alt="Zoomed project" class="max-h-[90vh] max-w-[90vw] rounded-sm"/>
  <button 
    id="closeModalBtn"
    class="absolute top-2 right-2 bg-white px-1.5 py-0.05 rounded-md shadow-md hover:bg-gray-200"
  >
    ✕
  </button>
</dialog>

<BaseLayout>
	<section id="Projects" class="w-full px-6 md:px-20 shadow-xl py-4 mt-24">
		<div class="flex justify-center">
			<h3 class="text-center text-3xl md:text-4xl font-extrabold tracking-tight text-white relative inline-block mb-8">Proyectos</h3>
		</div>
		<div class="flex flex-wrap justify-center gap-2 mb-10">
      {
        ALL_CATEGORIES.map((cat: string) => (
          <button 
            class="category-btn px-4 py-2 text-sm md:text-md font-semibold tracking-wide rounded-xl bg-white/20 dark:bg-black/30 text-white bg-black/70 hover:bg-white hover:text-black hover:scale-105 focus:bg-gray-200 focus:text-black focus:scale-105 active:bg-gray-300 active:text-black active:scale-95 transition-all duration-300 ease-in-out" 
            onclick={`filterCategory('${cat}')`}
          >
            {cat}
          </button>
        ))
      }
       </div>
	<div id="projectsGrid" class="w-full grid place-content-center gap-8">
      {
        PROJECTS.map((project, index) => (
          <div class="project-card" data-categories={project.categories.join(",")}>
            <Project project={project} index={index}/>
          </div>
        ))
      }
    </div>
</section>
<script type="module">
  // --- Filtrado de categorías ---
  function filterCategory(category) {
    const cards = document.querySelectorAll(".project-card");

    cards.forEach(card => {
      const cats = card.dataset.categories.split(",");
      card.style.display = (category === "Todos" || cats.includes(category)) ? "block" : "none";
    });
  }

  filterCategory("Todos");
  window.filterCategory = filterCategory;

  // --- Lógica del modal de imágenes ---
  const modal = document.getElementById("imgModal");
  const modalImg = document.getElementById("modal-img");
  const closeBtn = document.getElementById("closeModalBtn");

  document.addEventListener("click", e => {
    const target = e.target;
    if (target.matches("img[data-img]")) {
      modalImg.src = target.dataset.img;
      modal.showModal();
    }
  });

  closeBtn.addEventListener("click", () => modal.close());
</script>

</BaseLayout>
